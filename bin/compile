#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

BUILD_DIR="$1"
CACHE_DIR="$2"
ENV_DIR="$3"
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

source <(curl -s --retry 3 https://lang-common.s3.amazonaws.com/buildpack-stdlib/v7/stdlib.sh)

main() {
  header 'Building environment'
  export_env "$ENV_DIR"
  setup_dirs "$BP_DIR" "$BUILD_DIR"
  install_nodejs "$BUILD_DIR"
  validate_env

  header 'Installing sfdx'
  install_sfdx_cli "$BUILD_DIR"

  header 'Authorizing dev hub'
  authorize_dev_hub "$BUILD_DIR" "$SFDX_AUTH_URL" "$SFDX_USER_NAME"

  header 'Creating scratch org'
  create_scratch_org "$BUILD_DIR" "$BUILD_DIR/$WORKSPACE_JSON"

  header 'Pushing app source'
  push_source "$BUILD_DIR" "$SFDX_PERMSET"

  header 'Assigning permission sets'
  assign_permissions "$BUILD_DIR"

  header 'Saving org url'
  save_url "$BUILD_DIR" "$BUILD_DIR/force-org-open.txt"

  header "Successfully deployed!"
}

header() {
  echo "" || true
  echo -e "\033[96m\033[1m\033[40m=== $*\033[0m" || true
}

validate_env() {
  if [ "$SFDX_DESCRIPTION" = "" ]; then
    echo 'ERROR: Missing description'
    echo '       Set it with $ heroku config:set SFDX_DESCRIPTION="$(sfdx force:org:describe -u your@pilot.email --verbose --json)"'
    exit 1
  fi
  export SFDX_USER_NAME=`echo $SFDX_DESCRIPTION | jq -r .username`
  if [ "$SFDX_USER_NAME" = "" ]; then
    echo 'ERROR: Missing user name in description'
    echo '       Set it with $ heroku config:set SFDX_DESCRIPTION="$(sfdx force:org:describe -u your@pilot.email --verbose --json)"'
    exit 1
  fi
  if [ "$WORKSPACE_JSON" = "" ]; then
    echo 'INFO: WORKSPACE_JSON not set'
    echo '      Using default (config/workspace-scratch-def.json)'
    export WORKSPACE_JSON='config/workspace-scratch-def.json'
  fi
}

setup_dirs() {
  local BP="$1"
  local APP="$2"
  rsync -rLptD $BP/app/ "$APP"
  export PATH="$APP/.heroku/bin:$PATH"
}

install_nodejs() {
  local DIR="$1"
  read NUMBER URL < <(curl --silent --get --retry 5 --retry-max-time 15 --data-urlencode 'range=8.x' 'https://nodebin.herokai.com/v1/node/linux-x64/latest.txt')
  local CODE=$(curl "$URL" --silent --fail --retry 5 --retry-max-time 15 -o /tmp/node.tar.gz --write-out "%{http_code}")
  if [ "$CODE" != "200" ]; then
    echo "Unable to download node: $CODE" && false
  fi
  tar xzf /tmp/node.tar.gz -C /tmp
  rsync -rLptD /tmp/node-v*/ "$DIR/.heroku/"
  chmod +x $DIR/.heroku/bin/*
  echo "node $(node --version)"
}

install_sfdx_cli() {
  local URL='https://developer.salesforce.com/media/salesforce-cli/beta/sfdx-v5.7.4-57b4969-linux-amd64.tar.xz'
  local DIR="$1"
  curl --silent --location "$URL" | tar xJ
  cp sfdx/bin/sfdx "$DIR/.heroku/bin/sfdx"
  rm -rf "$DIR/.local/share/sfdx/cli"
  mkdir -p "$DIR/.local/share/sfdx"
  cp -r sfdx "$DIR/.local/share/sfdx/cli"
  sfdx update
  # sfdx plugins:install sfdx-oss-plugin
  # sfdx plugins
}

authorize_dev_hub() {
  local DIR="$1"
  local AUTH_URL="$2"
  local USER_NAME="$3"
  local FILE='/tmp/sfdx-description'
  echo "$SFDX_DESCRIPTION" > "$FILE"
  (cd "$DIR"
  sfdx force:auth:sfdxurl:store -f "$FILE" -s -d
  sfdx force:config:set defaultdevhubusername="$USER_NAME" --global > /dev/null
  )
}

create_scratch_org() {
  local DIR="$1"
  local FILE="$2"
  (cd "$DIR" && sfdx force:org:create -s -f "$FILE" -a 'heroku-sfdx-scratch-org')
}

push_source() {
  local DIR="$1"
  (cd "$DIR" && sfdx force:source:push)
}

assign_permissions() {
  local DIR="$1"
  (cd "$DIR"
  for file in "$DIR"/force-app/main/default/permissionsets/*; do
    local PERMSET=$(basename "$file" | cut -d. -f1)
    echo " - $PERMSET"
    sfdx force:user:permset:assign -n "$PERMSET"
  done
  )
}

save_url() {
  local DIR="$1"
  local FILE="$2"
  (cd "$DIR" && sfdx force:org:open -r | grep -o 'https://.*' > "$FILE")
  echo "$FILE"
}

main